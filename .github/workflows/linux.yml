name: Linux Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_all_architectures:
        description: 'Build all architectures including ARM64'
        required: false
        default: false
        type: boolean
      force_vcpkg:
        description: 'Force vcpkg builds (testing)'
        required: false
        default: false
        type: boolean

permissions: write-all

env:
  # Build optimization settings
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  MAKEFLAGS: "-j4"
  CACHE_VERSION: v2
  APP_NAME: sast-readium

jobs:
  # System packages build (preferred - fastest and most reliable)
  build-system:
    name: Linux ${{ matrix.arch }} (System Packages)
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: ubuntu-latest
            preset: Release-Unix
            cache_key: linux-system-x64
            packages: qt6-base-dev qt6-svg-dev qt6-tools-dev qt6-l10n-tools libpoppler-qt6-dev build-essential cmake ninja-build pkg-config
          # Debug build for primary architecture
          - arch: x64
            runner: ubuntu-latest
            preset: Debug-Unix
            cache_key: linux-system-x64-debug
            packages: qt6-base-dev qt6-svg-dev qt6-tools-dev qt6-l10n-tools libpoppler-qt6-dev build-essential cmake ninja-build pkg-config
            build_type: Debug

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      # System package caching
      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ env.CACHE_VERSION }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-apt-

      - name: Install system dependencies
        run: |
          # Use cached package lists if available
          sudo apt update
          sudo apt install -y ${{ matrix.packages }}

      - name: Verify dependencies
        run: |
          echo "Verifying system dependencies..."

          # Check Qt6 installation
          pkg-config --exists Qt6Core && echo "✓ Qt6Core found" || echo "✗ Qt6Core not found"
          pkg-config --exists Qt6Widgets && echo "✓ Qt6Widgets found" || echo "✗ Qt6Widgets not found"
          pkg-config --exists Qt6Svg && echo "✓ Qt6Svg found" || echo "✗ Qt6Svg not found"
          pkg-config --exists poppler-qt6 && echo "✓ poppler-qt6 found" || echo "✗ poppler-qt6 not found"

          # Check build tools
          which cmake ninja gcc g++ || true

          echo "Qt6 version: $(pkg-config --modversion Qt6Core 2>/dev/null || echo 'Not found')"
          echo "Poppler version: $(pkg-config --modversion poppler-qt6 2>/dev/null || echo 'Not found')"

      - name: Configure CMake
        run: |
          cmake --preset=${{ matrix.preset }} -DUSE_VCPKG=OFF

      - name: Build (optimized)
        run: |
          # Calculate optimal job count (75% of available cores)
          JOBS=$(nproc)
          JOBS=$((JOBS * 3 / 4))
          [ $JOBS -lt 1 ] && JOBS=1
          [ $JOBS -gt 8 ] && JOBS=8  # Cap for CI stability

          echo "Building with $JOBS parallel jobs"
          cmake --build --preset=${{ matrix.preset }} --parallel $JOBS

      - name: Upload system build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-${{ matrix.arch }}-system${{ matrix.build_type && format('-{0}', matrix.build_type) || '' }}
          path: |
            build/${{ matrix.build_type || 'Release' }}/app/app*
            build/${{ matrix.build_type || 'Release' }}/app/*.so*
            build/${{ matrix.build_type || 'Release' }}/app/styles/
          retention-days: 7

  # ARM64 cross-compilation build
  build-arm64:
    name: Linux ARM64 (Cross-compile)
    runs-on: ubuntu-latest
    if: github.event.inputs.build_all_architectures == 'true' || github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      # ARM64 toolchain caching
      - name: Cache ARM64 toolchain
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-arm64-toolchain-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-arm64-toolchain-

      - name: Setup ARM64 cross-compilation
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Add ARM64 architecture
          sudo dpkg --add-architecture arm64
          sudo apt update

          # Install ARM64 Qt6 packages
          sudo apt install -y \
            qt6-base-dev:arm64 \
            qt6-svg-dev:arm64 \
            libpoppler-qt6-dev:arm64 \
            cmake ninja-build pkg-config

      - name: Verify ARM64 toolchain
        run: |
          echo "ARM64 toolchain verification:"
          aarch64-linux-gnu-gcc --version
          aarch64-linux-gnu-g++ --version

          # Check cross-compilation Qt6 packages
          export PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig"
          pkg-config --exists Qt6Core && echo "✓ ARM64 Qt6Core found" || echo "✗ ARM64 Qt6Core not found"

      - name: Configure CMake (ARM64 cross-compile)
        run: |
          cmake --preset=Release-Unix \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
            -DPKG_CONFIG_EXECUTABLE=/usr/bin/pkg-config \
            -DUSE_VCPKG=OFF

      - name: Build ARM64
        run: |
          cmake --build --preset=Release-Unix --parallel 4

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-arm64
          path: |
            build/Release/app/app*
            build/Release/app/*.so*
            build/Release/app/styles/
          retention-days: 7

  # vcpkg build (fallback when system packages fail)
  build-vcpkg:
    name: Linux x64 (vcpkg fallback)
    runs-on: ubuntu-latest
    # Only run if system build fails or explicitly requested
    if: failure() || github.event.inputs.force_vcpkg == 'true' || contains(github.event.head_commit.message, '[vcpkg]')
    needs: build-system

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install system dependencies for vcpkg
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential cmake ninja-build pkg-config \
            autoconf automake autoconf-archive \
            '^libxcb.*-dev' libx11-xcb-dev libxrender-dev libxi-dev \
            libxkbcommon-dev libxkbcommon-x11-dev \
            libglu1-mesa-dev libegl1-mesa-dev

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # vcpkg caching
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ env.CACHE_VERSION }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-vcpkg-

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/packages
          key: ${{ runner.os }}-vcpkg-packages-${{ env.CACHE_VERSION }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-packages-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-vcpkg-packages-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgConfigurationJsonGlob: 'vcpkg-configuration.json'
          appendedCacheKey: ${{ env.CACHE_VERSION }}

      - name: Build with vcpkg
        uses: lukka/run-cmake@v10
        with:
          configurePreset: Release-Unix-vcpkg
          buildPreset: Release-Unix-vcpkg
          buildPresetAdditionalArgs: '--parallel 4'

      - name: Upload vcpkg build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-x64-vcpkg
          path: |
            build/Release-vcpkg/app/app*
            build/Release-vcpkg/app/*.so*
            build/Release-vcpkg/app/styles/
          retention-days: 7

  # Build summary and performance metrics
  build-summary:
    name: Linux Build Summary
    runs-on: ubuntu-latest
    needs: [build-system, build-arm64, build-vcpkg]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate build summary
        run: |
          echo "# Linux Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **Primary**: System packages (fastest)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-compile**: ARM64 support" >> $GITHUB_STEP_SUMMARY
          echo "- **Fallback**: vcpkg when system packages fail" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              file_count=$(find "$dir" -type f | wc -l)
              total_size=$(du -sh "$dir" | cut -f1)
              echo "- **$artifact_name**: $file_count files, $total_size" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Platform Coverage" >> $GITHUB_STEP_SUMMARY
          echo "✅ Linux x64 (System packages)" >> $GITHUB_STEP_SUMMARY

          if [ -d "artifacts/${{ env.APP_NAME }}-linux-arm64" ]; then
            echo "✅ Linux ARM64 (Cross-compiled)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ Linux ARM64 (On-demand)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/${{ env.APP_NAME }}-linux-x64-vcpkg" ]; then
            echo "✅ Linux x64 (vcpkg fallback)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ Linux x64 (vcpkg - not needed)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Performance Optimizations" >> $GITHUB_STEP_SUMMARY
          echo "- **System packages**: Prioritized over vcpkg" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel builds**: Optimized job count (75% of cores)" >> $GITHUB_STEP_SUMMARY
          echo "- **Package caching**: APT cache persistence" >> $GITHUB_STEP_SUMMARY
          echo "- **Shallow clones**: Faster repository checkout" >> $GITHUB_STEP_SUMMARY
