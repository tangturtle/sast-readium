name: macOS Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_universal:
        description: 'Build Universal binaries (Intel + Apple Silicon)'
        required: false
        default: true
        type: boolean
      force_vcpkg:
        description: 'Force vcpkg builds (testing)'
        required: false
        default: false
        type: boolean

permissions: write-all

env:
  # Build optimization settings
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  MAKEFLAGS: "-j4"
  CACHE_VERSION: v2
  APP_NAME: sast-readium
  # Homebrew optimizations
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  # Native builds for specific architectures
  build-native:
    name: macOS ${{ matrix.arch }} (System Packages)
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Intel x64 build
          - arch: x64
            runner: macos-13  # Intel runner
            preset: Release-Unix
            cache_key: macos-intel-x64
            packages: cmake ninja qt@6 pkg-config ccache
          # Apple Silicon ARM64 build
          - arch: arm64
            runner: macos-latest  # Apple Silicon runner
            preset: Release-Unix
            cache_key: macos-apple-arm64
            packages: cmake ninja qt@6 pkg-config ccache
          # Debug build for primary architecture
          - arch: arm64
            runner: macos-latest
            preset: Debug-Unix
            cache_key: macos-apple-arm64-debug
            packages: cmake ninja qt@6 pkg-config ccache
            build_type: Debug

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      # Homebrew caching
      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
          key: ${{ runner.os }}-${{ matrix.arch }}-brew-${{ env.CACHE_VERSION }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-brew-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-${{ matrix.arch }}-brew-

      # ccache for compilation caching
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.cache_key }}-ccache-${{ env.CACHE_VERSION }}
          max-size: 500M

      - name: Install system dependencies
        run: |
          echo "Installing Homebrew packages..."
          brew install ${{ matrix.packages }}

          # Install poppler dependencies
          echo "Installing poppler dependencies..."
          brew install cairo fontconfig freetype gettext glib gpgme jpeg-turbo libpng libtiff little-cms2 nspr nss openjpeg

          # Verify installations
          echo "Installed package versions:"
          brew list --versions cmake ninja qt@6 pkg-config ccache || true

      # Cache poppler build
      - name: Cache poppler build
        uses: actions/cache@v4
        with:
          path: |
            $(brew --prefix)/lib/libpoppler-qt6*
            $(brew --prefix)/lib/pkgconfig/poppler-qt6.pc
            $(brew --prefix)/include/poppler/qt6
          key: ${{ runner.os }}-${{ matrix.arch }}-poppler-qt6-25.08.0-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-poppler-qt6-25.08.0-
            ${{ runner.os }}-${{ matrix.arch }}-poppler-qt6-

      - name: Build poppler with Qt6 support
        run: |
          # Check if poppler-qt6 is already available
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$(brew --prefix qt@6)/lib/pkgconfig:$PKG_CONFIG_PATH"
          if pkg-config --exists poppler-qt6; then
            echo "✓ poppler-qt6 already available from cache"
            exit 0
          fi

          echo "Building poppler with Qt6 support..."

          # Download poppler source
          POPPLER_VERSION="25.08.0"
          curl -L "https://poppler.freedesktop.org/poppler-${POPPLER_VERSION}.tar.xz" -o poppler.tar.xz
          tar -xf poppler.tar.xz
          cd "poppler-${POPPLER_VERSION}"

          # Configure poppler with Qt6 support
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$(brew --prefix)" \
            -DENABLE_QT6=ON \
            -DENABLE_QT5=OFF \
            -DENABLE_GLIB=ON \
            -DENABLE_CPP=ON \
            -DBUILD_GTK_TESTS=OFF \
            -DENABLE_BOOST=OFF \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch == 'x64' && 'x86_64' || 'arm64' }}"

          # Build and install
          make -j$(sysctl -n hw.ncpu)
          sudo make install

          # Verify installation
          pkg-config --exists poppler-qt6 && echo "✓ poppler-qt6 built successfully" || echo "✗ poppler-qt6 build failed"

      - name: Verify dependencies
        run: |
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Architecture: $(uname -m)"
          echo "Xcode version: $(xcodebuild -version | head -1)"

          # Check Qt6 installation
          export PKG_CONFIG_PATH="$(brew --prefix qt@6)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
          pkg-config --exists Qt6Core && echo "✓ Qt6Core found" || echo "✗ Qt6Core not found"
          pkg-config --exists Qt6Widgets && echo "✓ Qt6Widgets found" || echo "✗ Qt6Widgets not found"
          pkg-config --exists Qt6Svg && echo "✓ Qt6Svg found" || echo "✗ Qt6Svg not found"
          pkg-config --exists poppler-qt6 && echo "✓ poppler-qt6 found" || echo "✗ poppler-qt6 not found"

          # Check build tools
          which cmake ninja ccache clang++ || true

          echo "Qt6 version: $(pkg-config --modversion Qt6Core 2>/dev/null || echo 'Not found')"
          echo "Poppler version: $(pkg-config --modversion poppler-qt6 2>/dev/null || echo 'Not found')"

      - name: Configure CMake (with ccache)
        run: |
          export PATH="/usr/local/opt/ccache/libexec:/opt/homebrew/opt/ccache/libexec:$PATH"
          export PKG_CONFIG_PATH="$(brew --prefix qt@6)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
          export CC="ccache clang"
          export CXX="ccache clang++"

          cmake --preset=${{ matrix.preset }} -DUSE_VCPKG=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build (optimized)
        run: |
          # Calculate optimal job count (75% of available cores)
          JOBS=$(sysctl -n hw.ncpu)
          JOBS=$((JOBS * 3 / 4))
          [ $JOBS -lt 1 ] && JOBS=1
          [ $JOBS -gt 8 ] && JOBS=8  # Cap for CI stability

          echo "Building with $JOBS parallel jobs"
          cmake --build --preset=${{ matrix.preset }} --parallel $JOBS

      - name: Show ccache statistics
        run: ccache -s

      - name: Upload native build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos-${{ matrix.arch }}${{ matrix.build_type && format('-{0}', matrix.build_type) || '' }}
          path: |
            build/${{ matrix.build_type || 'Release' }}/app/app*
            build/${{ matrix.build_type || 'Release' }}/app/*.dylib*
            build/${{ matrix.build_type || 'Release' }}/app/styles/
          retention-days: 7

  # Universal binary build (Intel + Apple Silicon)
  build-universal:
    name: macOS Universal (System Packages)
    runs-on: macos-latest
    if: github.event.inputs.build_universal == 'true' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      # Homebrew caching for universal build
      - name: Cache Homebrew (Universal)
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew
          key: ${{ runner.os }}-universal-brew-${{ env.CACHE_VERSION }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-universal-brew-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-universal-brew-

      # ccache for universal build
      - name: Setup ccache (Universal)
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: macos-universal-ccache-${{ env.CACHE_VERSION }}
          max-size: 750M  # Larger cache for universal builds

      - name: Install system dependencies
        run: |
          echo "Installing Homebrew packages for Universal build..."
          brew install cmake ninja qt@6 pkg-config ccache

          # Install poppler dependencies
          echo "Installing poppler dependencies..."
          brew install cairo fontconfig freetype gettext glib gpgme jpeg-turbo libpng libtiff little-cms2 nspr nss openjpeg

      # Cache poppler build for Universal
      - name: Cache poppler build (Universal)
        uses: actions/cache@v4
        with:
          path: |
            $(brew --prefix)/lib/libpoppler-qt6*
            $(brew --prefix)/lib/pkgconfig/poppler-qt6.pc
            $(brew --prefix)/include/poppler/qt6
          key: ${{ runner.os }}-universal-poppler-qt6-25.08.0-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-universal-poppler-qt6-25.08.0-
            ${{ runner.os }}-universal-poppler-qt6-

      - name: Build poppler with Qt6 support (Universal)
        run: |
          # Check if poppler-qt6 is already available
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$(brew --prefix qt@6)/lib/pkgconfig:$PKG_CONFIG_PATH"
          if pkg-config --exists poppler-qt6; then
            echo "✓ poppler-qt6 already available from cache"
            exit 0
          fi

          echo "Building poppler with Qt6 support for Universal binary..."

          # Download poppler source
          POPPLER_VERSION="25.08.0"
          curl -L "https://poppler.freedesktop.org/poppler-${POPPLER_VERSION}.tar.xz" -o poppler.tar.xz
          tar -xf poppler.tar.xz
          cd "poppler-${POPPLER_VERSION}"

          # Configure poppler with Qt6 support for Universal binary
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$(brew --prefix)" \
            -DENABLE_QT6=ON \
            -DENABLE_QT5=OFF \
            -DENABLE_GLIB=ON \
            -DENABLE_CPP=ON \
            -DBUILD_GTK_TESTS=OFF \
            -DENABLE_BOOST=OFF \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"

          # Build and install
          make -j$(sysctl -n hw.ncpu)
          sudo make install

          # Verify installation
          pkg-config --exists poppler-qt6 && echo "✓ poppler-qt6 built successfully" || echo "✗ poppler-qt6 build failed"

      - name: Verify Universal build environment
        run: |
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Native architecture: $(uname -m)"
          echo "Rosetta 2 status: $(pgrep oahd >/dev/null && echo 'Available' || echo 'Not available')"

          # Check for both architectures support
          lipo -info /usr/bin/file 2>/dev/null || echo "lipo not available"

          # Verify Qt6 installation
          export PKG_CONFIG_PATH="$(brew --prefix qt@6)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
          pkg-config --exists Qt6Core && echo "✓ Qt6Core found" || echo "✗ Qt6Core not found"
          pkg-config --exists poppler-qt6 && echo "✓ poppler-qt6 found" || echo "✗ poppler-qt6 not found"

      - name: Configure CMake (Universal Binary)
        run: |
          export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"
          export PKG_CONFIG_PATH="$(brew --prefix qt@6)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
          export CC="ccache clang"
          export CXX="ccache clang++"

          cmake --preset=Release-Unix -DUSE_VCPKG=OFF \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build Universal Binary
        run: |
          JOBS=$(sysctl -n hw.ncpu)
          JOBS=$((JOBS * 3 / 4))
          [ $JOBS -lt 1 ] && JOBS=1
          [ $JOBS -gt 6 ] && JOBS=6  # Conservative for universal builds

          echo "Building Universal binary with $JOBS parallel jobs"
          cmake --build --preset=Release-Unix --parallel $JOBS

      - name: Verify Universal Binary
        run: |
          if [ -f "build/Release/app/app" ]; then
            echo "Universal binary verification:"
            file build/Release/app/app
            lipo -info build/Release/app/app
            lipo -archs build/Release/app/app
          else
            echo "Binary not found!"
            exit 1
          fi

      - name: Show ccache statistics
        run: ccache -s

      - name: Upload Universal binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos-universal
          path: |
            build/Release/app/app*
            build/Release/app/*.dylib*
            build/Release/app/styles/
          retention-days: 7

  # vcpkg build (fallback when system packages fail)
  build-vcpkg:
    name: macOS x64 (vcpkg fallback)
    runs-on: macos-13  # Intel runner for vcpkg compatibility
    if: failure() || github.event.inputs.force_vcpkg == 'true' || contains(github.event.head_commit.message, '[vcpkg]')
    needs: build-native

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install system dependencies for vcpkg
        run: |
          brew install cmake ninja pkg-config autoconf automake autoconf-archive libtool

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # vcpkg caching
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ env.CACHE_VERSION }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-vcpkg-

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/packages
          key: ${{ runner.os }}-vcpkg-packages-${{ env.CACHE_VERSION }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-packages-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-vcpkg-packages-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgConfigurationJsonGlob: 'vcpkg-configuration.json'
          appendedCacheKey: ${{ env.CACHE_VERSION }}

      - name: Build with vcpkg
        uses: lukka/run-cmake@v10
        with:
          configurePreset: Release-Unix-vcpkg
          buildPreset: Release-Unix-vcpkg
          buildPresetAdditionalArgs: '--parallel 4'

      - name: Upload vcpkg build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos-x64-vcpkg
          path: |
            build/Release-vcpkg/app/app*
            build/Release-vcpkg/app/*.dylib*
            build/Release-vcpkg/app/styles/
          retention-days: 7

  # Build summary and performance metrics
  build-summary:
    name: macOS Build Summary
    runs-on: macos-latest
    needs: [build-native, build-universal, build-vcpkg]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate build summary
        run: |
          echo "# macOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **Primary**: System packages with Homebrew + custom poppler-qt6 build + ccache" >> $GITHUB_STEP_SUMMARY
          echo "- **Universal**: Intel + Apple Silicon binaries" >> $GITHUB_STEP_SUMMARY
          echo "- **Fallback**: vcpkg when system packages fail" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              file_count=$(find "$dir" -type f | wc -l)
              total_size=$(du -sh "$dir" | cut -f1)
              echo "- **$artifact_name**: $file_count files, $total_size" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Platform Coverage" >> $GITHUB_STEP_SUMMARY

          if [ -d "artifacts/${{ env.APP_NAME }}-macos-x64" ]; then
            echo "✅ macOS x64 (Intel)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/${{ env.APP_NAME }}-macos-arm64" ]; then
            echo "✅ macOS ARM64 (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/${{ env.APP_NAME }}-macos-universal" ]; then
            echo "✅ macOS Universal (Intel + Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ macOS Universal (On-demand)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/${{ env.APP_NAME }}-macos-x64-vcpkg" ]; then
            echo "✅ macOS x64 (vcpkg fallback)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ macOS x64 (vcpkg - not needed)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Performance Optimizations" >> $GITHUB_STEP_SUMMARY
          echo "- **ccache**: Compilation caching (500MB-750MB limit)" >> $GITHUB_STEP_SUMMARY
          echo "- **Homebrew**: System package management" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom poppler-qt6**: Built from source with Qt6 support and caching" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel builds**: Optimized job count (75% of cores)" >> $GITHUB_STEP_SUMMARY
          echo "- **Package caching**: Homebrew + poppler cache persistence" >> $GITHUB_STEP_SUMMARY
          echo "- **Universal binaries**: Single artifact for both architectures" >> $GITHUB_STEP_SUMMARY
